// Code generated by MockGen. DO NOT EDIT.
// Source: ./svc.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	watcher "github.com/radovskyb/watcher"
)

// MockISvc is a mock of ISvc interface.
type MockISvc struct {
	ctrl     *gomock.Controller
	recorder *MockISvcMockRecorder
}

// MockISvcMockRecorder is the mock recorder for MockISvc.
type MockISvcMockRecorder struct {
	mock *MockISvc
}

// NewMockISvc creates a new mock instance.
func NewMockISvc(ctrl *gomock.Controller) *MockISvc {
	mock := &MockISvc{ctrl: ctrl}
	mock.recorder = &MockISvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISvc) EXPECT() *MockISvcMockRecorder {
	return m.recorder
}

// Deploy mocks base method.
func (m *MockISvc) Deploy(k8sfile string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Deploy", k8sfile)
}

// Deploy indicates an expected call of Deploy.
func (mr *MockISvcMockRecorder) Deploy(k8sfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockISvc)(nil).Deploy), k8sfile)
}

// DoRestart mocks base method.
func (m *MockISvc) DoRestart() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoRestart")
}

// DoRestart indicates an expected call of DoRestart.
func (mr *MockISvcMockRecorder) DoRestart() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRestart", reflect.TypeOf((*MockISvc)(nil).DoRestart))
}

// DoRun mocks base method.
func (m *MockISvc) DoRun() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoRun")
}

// DoRun indicates an expected call of DoRun.
func (mr *MockISvcMockRecorder) DoRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRun", reflect.TypeOf((*MockISvc)(nil).DoRun))
}

// DoWatch mocks base method.
func (m *MockISvc) DoWatch() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DoWatch")
}

// DoWatch indicates an expected call of DoWatch.
func (mr *MockISvcMockRecorder) DoWatch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoWatch", reflect.TypeOf((*MockISvc)(nil).DoWatch))
}

// GenClient mocks base method.
func (m *MockISvc) GenClient() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GenClient")
}

// GenClient indicates an expected call of GenClient.
func (mr *MockISvcMockRecorder) GenClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenClient", reflect.TypeOf((*MockISvc)(nil).GenClient))
}

// GetDir mocks base method.
func (m *MockISvc) GetDir() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDir")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDir indicates an expected call of GetDir.
func (mr *MockISvcMockRecorder) GetDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDir", reflect.TypeOf((*MockISvc)(nil).GetDir))
}

// GetWatcher mocks base method.
func (m *MockISvc) GetWatcher() *watcher.Watcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatcher")
	ret0, _ := ret[0].(*watcher.Watcher)
	return ret0
}

// GetWatcher indicates an expected call of GetWatcher.
func (mr *MockISvcMockRecorder) GetWatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatcher", reflect.TypeOf((*MockISvc)(nil).GetWatcher))
}

// Http mocks base method.
func (m *MockISvc) Http() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Http")
}

// Http indicates an expected call of Http.
func (mr *MockISvcMockRecorder) Http() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Http", reflect.TypeOf((*MockISvc)(nil).Http))
}

// Init mocks base method.
func (m *MockISvc) Init() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init.
func (mr *MockISvcMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockISvc)(nil).Init))
}

// Push mocks base method.
func (m *MockISvc) Push(repo string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Push", repo)
}

// Push indicates an expected call of Push.
func (mr *MockISvcMockRecorder) Push(repo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Push", reflect.TypeOf((*MockISvc)(nil).Push), repo)
}

// Run mocks base method.
func (m *MockISvc) Run(watch bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", watch)
}

// Run indicates an expected call of Run.
func (mr *MockISvcMockRecorder) Run(watch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockISvc)(nil).Run), watch)
}

// SetWatcher mocks base method.
func (m *MockISvc) SetWatcher(w *watcher.Watcher) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetWatcher", w)
}

// SetWatcher indicates an expected call of SetWatcher.
func (mr *MockISvcMockRecorder) SetWatcher(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWatcher", reflect.TypeOf((*MockISvc)(nil).SetWatcher), w)
}

// Shutdown mocks base method.
func (m *MockISvc) Shutdown(k8sfile string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown", k8sfile)
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockISvcMockRecorder) Shutdown(k8sfile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockISvc)(nil).Shutdown), k8sfile)
}

// Upgrade mocks base method.
func (m *MockISvc) Upgrade(version string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Upgrade", version)
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockISvcMockRecorder) Upgrade(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockISvc)(nil).Upgrade), version)
}
