// Code generated by go generate; DO NOT EDIT.
// This file was generated by go-doudou at
// 2021-06-13 16:10:05.662259 +0800 CST m=+0.003993663
package ddhttp

import (
	"encoding/json"
	"reflect"

	"github.com/unionj-cloud/go-doudou/name/strategies"
)

func (object HttpLog) MarshalJSON() ([]byte, error) {
	objectMap := make(map[string]interface{})
	if !reflect.ValueOf(object.ClientIp).IsZero() {
		objectMap[strategies.LowerCaseConvert("ClientIp")] = object.ClientIp
	}
	if !reflect.ValueOf(object.HttpMethod).IsZero() {
		objectMap[strategies.LowerCaseConvert("HttpMethod")] = object.HttpMethod
	}
	if !reflect.ValueOf(object.Uri).IsZero() {
		objectMap[strategies.LowerCaseConvert("Uri")] = object.Uri
	}
	if !reflect.ValueOf(object.Proto).IsZero() {
		objectMap[strategies.LowerCaseConvert("Proto")] = object.Proto
	}
	if !reflect.ValueOf(object.Host).IsZero() {
		objectMap[strategies.LowerCaseConvert("Host")] = object.Host
	}
	if !reflect.ValueOf(object.ReqContentLength).IsZero() {
		objectMap[strategies.LowerCaseConvert("ReqContentLength")] = object.ReqContentLength
	}
	if !reflect.ValueOf(object.ReqHeader).IsZero() {
		objectMap[strategies.LowerCaseConvert("ReqHeader")] = object.ReqHeader
	}
	if !reflect.ValueOf(object.RequestId).IsZero() {
		objectMap[strategies.LowerCaseConvert("RequestId")] = object.RequestId
	}
	if !reflect.ValueOf(object.RawReq).IsZero() {
		objectMap[strategies.LowerCaseConvert("RawReq")] = object.RawReq
	}
	if !reflect.ValueOf(object.RespBody).IsZero() {
		objectMap[strategies.LowerCaseConvert("RespBody")] = object.RespBody
	}
	if !reflect.ValueOf(object.StatusCode).IsZero() {
		objectMap[strategies.LowerCaseConvert("StatusCode")] = object.StatusCode
	}
	if !reflect.ValueOf(object.RespHeader).IsZero() {
		objectMap[strategies.LowerCaseConvert("RespHeader")] = object.RespHeader
	}
	if !reflect.ValueOf(object.RespContentLength).IsZero() {
		objectMap[strategies.LowerCaseConvert("RespContentLength")] = object.RespContentLength
	}
	if !reflect.ValueOf(object.ElapsedTime).IsZero() {
		objectMap[strategies.LowerCaseConvert("ElapsedTime")] = object.ElapsedTime
	}
	if !reflect.ValueOf(object.Elapsed).IsZero() {
		objectMap[strategies.LowerCaseConvert("Elapsed")] = object.Elapsed
	}
	return json.Marshal(objectMap)
}
