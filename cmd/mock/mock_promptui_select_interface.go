// Code generated by MockGen. DO NOT EDIT.
// Source: ./promptui_select_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockISelect is a mock of ISelect interface.
type MockISelect struct {
	ctrl     *gomock.Controller
	recorder *MockISelectMockRecorder
}

// MockISelectMockRecorder is the mock recorder for MockISelect.
type MockISelectMockRecorder struct {
	mock *MockISelect
}

// NewMockISelect creates a new mock instance.
func NewMockISelect(ctrl *gomock.Controller) *MockISelect {
	mock := &MockISelect{ctrl: ctrl}
	mock.recorder = &MockISelectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISelect) EXPECT() *MockISelectMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockISelect) Run() (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockISelectMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockISelect)(nil).Run))
}

// RunCursorAt mocks base method.
func (m *MockISelect) RunCursorAt(cursorPos, scroll int) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunCursorAt", cursorPos, scroll)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RunCursorAt indicates an expected call of RunCursorAt.
func (mr *MockISelectMockRecorder) RunCursorAt(cursorPos, scroll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunCursorAt", reflect.TypeOf((*MockISelect)(nil).RunCursorAt), cursorPos, scroll)
}

// ScrollPosition mocks base method.
func (m *MockISelect) ScrollPosition() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScrollPosition")
	ret0, _ := ret[0].(int)
	return ret0
}

// ScrollPosition indicates an expected call of ScrollPosition.
func (mr *MockISelectMockRecorder) ScrollPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScrollPosition", reflect.TypeOf((*MockISelect)(nil).ScrollPosition))
}
